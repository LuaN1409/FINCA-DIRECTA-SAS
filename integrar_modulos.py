"""
Script para integrar los m√≥dulos modernos en fincaDirectaGUI.py
"""

import sys
import os

"""
Script para integrar los m√≥dulos modernos en fincaDirectaGUI.py
"""

import sys
import os
import re

def extraer_metodos_modernos():
    """Extraer m√©todos de modulos_modernos.py"""
    
    with open('modulos_modernos.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Encontrar todos los m√©todos que empiezan con 'def ' y tienen 'self'
    methods = []
    lines = content.split('\n')
    current_method = []
    in_method = False
    indent_level = 0
    
    for line in lines:
        if line.startswith('def ') and '(self' in line:
            # Guardar m√©todo anterior si existe
            if current_method:
                methods.append('\n'.join(current_method))
            
            # Iniciar nuevo m√©todo
            current_method = [line]
            in_method = True
            indent_level = len(line) - len(line.lstrip())
            
        elif in_method:
            # Si encontramos otra funci√≥n o l√≠nea sin indentaci√≥n apropiada
            if line.startswith('def ') or (line.strip() and not line.startswith(' ') and not line.startswith('\t')):
                # Terminar m√©todo actual a menos que sea otro m√©todo
                if line.startswith('def ') and '(self' in line:
                    methods.append('\n'.join(current_method))
                    current_method = [line]
                    indent_level = len(line) - len(line.lstrip())
                else:
                    methods.append('\n'.join(current_method))
                    current_method = []
                    in_method = False
            else:
                # Agregar l√≠nea al m√©todo actual
                current_method.append(line)
    
    # Agregar √∫ltimo m√©todo
    if current_method:
        methods.append('\n'.join(current_method))
    
    return methods

def integrar_en_finca_directa():
    """Integrar m√©todos en fincaDirectaGUI.py"""
    
    print("ÔøΩ Iniciando integraci√≥n autom√°tica...")
    
    # Extraer m√©todos modernos
    methods = extraer_metodos_modernos()
    print(f"üì¶ Extra√≠dos {len(methods)} m√©todos modernos")
    
    for i, method in enumerate(methods):
        first_line = method.split('\n')[0]
        method_name = first_line.split('(')[0].replace('def ', '').strip()
        print(f"   {i+1}. {method_name}")
    
    # Leer fincaDirectaGUI.py
    with open('fincaDirectaGUI.py', 'r', encoding='utf-8') as f:
        gui_content = f.read()
    
    # Encontrar el final de la clase SistemaFincaDirectaGUI
    # Buscar la √∫ltima l√≠nea de m√©todo de la clase
    lines = gui_content.split('\n')
    insert_position = len(lines)
    
    # Buscar el mejor lugar para insertar (antes de la funci√≥n main o al final de la clase)
    for i in range(len(lines) - 1, -1, -1):
        line = lines[i].strip()
        if line.startswith('def main(') or line.startswith('if __name__'):
            insert_position = i
            break
        elif line.startswith('def ') and 'self' in line and not line.strip().startswith('#'):
            # Encontrar el final de este m√©todo
            j = i + 1
            while j < len(lines) and (lines[j].startswith('    ') or lines[j].strip() == ''):
                j += 1
            insert_position = j
            break
    
    # Preparar m√©todos para insertar
    methods_to_insert = []
    for method in methods:
        method_lines = method.split('\n')
        # Asegurar indentaci√≥n correcta (4 espacios)
        indented_method = []
        for line in method_lines:
            if line.strip():  # Si no est√° vac√≠a
                indented_method.append('    ' + line)
            else:
                indented_method.append('')
        methods_to_insert.extend(indented_method)
        methods_to_insert.append('')  # L√≠nea vac√≠a entre m√©todos
    
    # Insertar m√©todos
    new_lines = lines[:insert_position] + ['', '    # ==================== M√âTODOS MODERNOS INTEGRADOS ====================', ''] + methods_to_insert + lines[insert_position:]
    
    # Escribir archivo actualizado
    with open('fincaDirectaGUI.py', 'w', encoding='utf-8') as f:
        f.write('\n'.join(new_lines))
    
    print(f"\n‚úÖ Integraci√≥n completada exitosamente!")
    print(f"üìù Se agregaron {len(methods)} m√©todos modernos a fincaDirectaGUI.py")
    print(f"üìç M√©todos insertados en la l√≠nea {insert_position}")
    
    return True

def integrar_modulos():
    """Funci√≥n principal de integraci√≥n"""
    try:
        return integrar_en_finca_directa()
    except Exception as e:
        print(f"‚ùå Error durante la integraci√≥n: {e}")
        return False

if __name__ == "__main__":
    print("ÔøΩ Integrando m√≥dulos modernos en fincaDirectaGUI.py...")
    print("=" * 60)
    
    success = integrar_modulos()
    
    if success:
        print("\n" + "=" * 60)
        print("üéâ ¬°Integraci√≥n completada exitosamente!")
        print("üöÄ fincaDirectaGUI.py ahora incluye todos los m√©todos modernos")
        print("üí° Puedes ejecutar la aplicaci√≥n para probar los nuevos m√≥dulos")
    else:
        print("\n‚ùå La integraci√≥n fall√≥. Revisa los errores anteriores.")
